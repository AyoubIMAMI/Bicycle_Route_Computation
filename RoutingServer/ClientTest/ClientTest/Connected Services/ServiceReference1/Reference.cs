//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientTest.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IItinerary")]
    public interface IItinerary {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItinerary/GetItinerary", ReplyAction="http://tempuri.org/IItinerary/GetItineraryResponse")]
        string GetItinerary(string destinationAddress, string originAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItinerary/GetItinerary", ReplyAction="http://tempuri.org/IItinerary/GetItineraryResponse")]
        System.Threading.Tasks.Task<string> GetItineraryAsync(string destinationAddress, string originAddress);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IItineraryChannel : ClientTest.ServiceReference1.IItinerary, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ItineraryClient : System.ServiceModel.ClientBase<ClientTest.ServiceReference1.IItinerary>, ClientTest.ServiceReference1.IItinerary {
        
        public ItineraryClient() {
        }
        
        public ItineraryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ItineraryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ItineraryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ItineraryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetItinerary(string destinationAddress, string originAddress) {
            return base.Channel.GetItinerary(destinationAddress, originAddress);
        }
        
        public System.Threading.Tasks.Task<string> GetItineraryAsync(string destinationAddress, string originAddress) {
            return base.Channel.GetItineraryAsync(destinationAddress, originAddress);
        }
    }
}
